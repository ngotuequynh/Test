define("block_stash/swap",["exports","core/modal_factory","core/modal_events","core/templates","core/ajax","core/toast","core/str"],(function(_exports,_modal_factory,_modal_events,_templates,_ajax,_toast,_str){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * User swap code
   *
   * @copyright  2019 Adrian Greeve - adriangreeve.com
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_modal_factory=_interopRequireDefault(_modal_factory),_modal_events=_interopRequireDefault(_modal_events),_templates=_interopRequireDefault(_templates),_ajax=_interopRequireDefault(_ajax);const showModal=async e=>{let swapbtn=e.currentTarget,courseid=swapbtn.getAttribute("data-courseid"),userid=swapbtn.getAttribute("data-userid"),itemid=swapbtn.dataset.itemid,myuserid=swapbtn.getAttribute("data-myuserid"),[userstash,mystash]=await Promise.all([getUserStash(courseid,userid),getUserStash(courseid,myuserid)]).catch((()=>((0,_toast.add)((0,_str.get_string)("noitemstotrade","block_stash"),{type:"warning",autohide:!0,closeButton:!0}),[])));if(0==mystash.length)return;const modal=await buildModal(courseid,userstash,mystash,userid,myuserid,itemid);displayModal(modal)},buildModal=async function(courseid,userstash,mystash,userid,myuserid){let itemid=arguments.length>5&&void 0!==arguments[5]?arguments[5]:null,context={courseid:courseid,yourstash:userstash,mystash:mystash,userid:userid,myuserid:myuserid,itemid:itemid};return _modal_factory.default.create({title:(0,_str.get_string)("createtrade","block_stash"),body:_templates.default.render("block_stash/local/swap/swap_form",context),type:_modal_factory.default.types.SAVE_CANCEL})},displayModal=async modal=>{let savetext=(0,_str.get_string)("sendtraderequest","block_stash");modal.setSaveButtonText(savetext),modal.getRoot().on(_modal_events.default.save,(()=>{let myitems=[],youritems=[],swapitems=document.getElementsByClassName("block-stash-quantity");Object.entries(swapitems).forEach((item=>{"your-items"==item[1].getAttribute("data-select-type")?youritems.push({id:item[1].getAttribute("data-itemid"),quantity:item[1].value}):myitems.push({id:item[1].getAttribute("data-itemid"),quantity:item[1].value})}));let formelement=document.querySelector("form"),courseid=formelement.getAttribute("data-courseid"),userid=formelement.getAttribute("data-userid"),myuserid=formelement.getAttribute("data-myuserid");submitSwap(userid,myuserid,courseid,youritems,myitems),modal.destroy()})),modal.getRoot().on(_modal_events.default.hidden,(()=>{modal.destroy()})),modal.show()},submitSwap=(userid,myuserid,courseid,items,myitems)=>_ajax.default.call([{methodname:"block_stash_create_swap_request",args:{userid:userid,myuserid:myuserid,courseid:courseid,items:items,myitems:myitems}}])[0].then((allitems=>((0,_toast.add)((0,_str.get_string)("requestsent","block_stash"),{type:"info",autohide:!0,closeButton:!0}),allitems))),getUserStash=(courseid,userid)=>_ajax.default.call([{methodname:"block_stash_get_user_stash_items",args:{courseid:courseid,userid:userid}}])[0].then((allitems=>allitems));_exports.init=()=>{let swapbtns=document.querySelectorAll("[data-swap]");for(let swapbtn of swapbtns)swapbtn.addEventListener("click",showModal)}}));

//# sourceMappingURL=swap.min.js.map