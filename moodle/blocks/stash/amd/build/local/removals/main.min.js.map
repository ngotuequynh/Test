{"version":3,"file":"main.min.js","sources":["../../../src/local/removals/main.js"],"sourcesContent":["import ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport * as tradeAdder from 'block_stash/local/trade_adder/main';\nimport Ajax from 'core/ajax';\nimport * as getItems from 'block_stash/local/datasources/items-getter';\nimport {get_string as getString} from 'core/str';\nimport * as Toast from 'core/toast';\n\nconst showModal = async(courseid, editdetails = []) => {\n    const modal = await buildModal(courseid, editdetails);\n    displayModal(modal, courseid);\n};\n\nconst buildModal = async(courseid, editdetails) => {\n\n    // Fetch quizzes.\n    let quizzes = await fetchQuizData(courseid);\n\n    quizzes.activities.forEach((quiz) => {\n        quiz['selected'] = false;\n        if (editdetails.length !== 0) {\n            if (quiz.id == editdetails.quizid) {\n                quiz['selected'] = true;\n            }\n        }\n    });\n\n    let context = {'courseid': courseid, 'quizzes': quizzes.activities};\n    if (editdetails.length !== 0) {\n        let allitems = await getItems.getIndexedItems(courseid);\n        let additemsdata = [];\n        editdetails.items.forEach((item) => {\n            additemsdata.push(\n                {\n                    'itemid': item.itemid,\n                    'name': allitems[item.itemid].name,\n                    'quantity': item.quantity,\n                    'imageurl': allitems[item.itemid].imageurl\n                }\n            );\n        });\n        context['additems'] = additemsdata;\n        context['removalid'] = editdetails.removalid;\n    }\n    window.console.log(context);\n\n    return ModalFactory.create({\n        title: getString('configureremoval', 'block_stash'),\n        body: Templates.render('block_stash/local/removal/removal_form', context),\n        type: ModalFactory.types.SAVE_CANCEL\n    });\n};\n\nconst displayModal = async(modal, courseid) => {\n\n    modal.getRoot().on(ModalEvents.bodyRendered, () => {\n        tradeAdder.init();\n        tradeAdder.registerActions();\n    });\n\n    modal.getRoot().on(ModalEvents.save, () => {\n        saveData(courseid);\n    });\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        modal.destroy();\n    });\n    modal.show();\n};\n\nconst saveData = async (courseid) => {\n    let itemsinfo = document.querySelectorAll('.block-stash-quantity');\n    let items = [];\n    let returnitemdata = [];\n    itemsinfo.forEach((item) => {\n        let itemid = item.closest('.block-stash-trade-item').getAttribute('data-id');\n        let basedata = {\n            'itemid': parseInt(itemid),\n            'quantity': parseInt(item.value)\n        };\n        // Do it again, but duplicating objects just ends up with a reference which is not what I want.\n        let fulldata = {\n            'itemid': parseInt(itemid),\n            'quantity': parseInt(item.value),\n            'name': item.closest('.block-stash-trade-item').children[0].innerText.trim()\n        };\n        items.push(basedata);\n        returnitemdata.push(fulldata);\n    });\n    let quizselect = document.querySelector('.block-stash-quiz-select');\n    let cmid = quizselect.value;\n    if (cmid === '0') {\n        await Toast.addToastRegion(document.querySelector('.modal-body'));\n        Toast.add(getString('selectquizcheck', 'block_stash'), {\n            type: 'danger',\n            autohide: true,\n            closeButton: true,\n        });\n        return false;\n    }\n    let removalid = 0;\n    let removalelement = document.getElementById('block_stash_removal_id');\n    if (removalelement) {\n        removalid = updateRemovalEntry(courseid, parseInt(cmid), items, removalelement.dataset.id).then(() => {\n            Toast.add(getString('configupdated', 'block_stash'), {\n                type: 'info',\n                autohide: true,\n                closeButton: true,\n            });\n        });\n    } else {\n        removalid = await saveRemovalEntry(courseid, parseInt(cmid), items);\n    }\n\n    let context = {\n        'cmid': cmid,\n        'cmname': quizselect.item(quizselect.selectedIndex).text,\n        'courseid': courseid,\n        'removalid': removalid,\n        'items': returnitemdata,\n        'editinfo': JSON.stringify(items)\n    };\n    // window.console.log(context);\n    Templates.render('block_stash/local/removal/table_row', context).then((html, js) => {\n        if (!removalelement) {\n            let tableobject = document.querySelector('.block-stash-removal-body');\n            let things = Templates.appendNodeContents(tableobject, html, js);\n            registerDeleteEvent(courseid, things[0].querySelector('.block-stash-removal-icon'));\n            registerEditEvent(courseid, things[0].querySelector('.block-stash-removal-edit'));\n        } else {\n            let rowelement = document.querySelector('.block-stash-removal-edit[data-id=\"' + removalid + '\"');\n            let tmpe = rowelement.closest('tr');\n            let things = Templates.replaceNode(tmpe, html, js);\n            registerDeleteEvent(courseid, things[0].querySelector('.block-stash-removal-icon'));\n            registerEditEvent(courseid, things[0].querySelector('.block-stash-removal-edit'));\n        }\n    });\n};\n\nconst registerDeleteEvent = (courseid, deleteobject) => {\n    deleteobject.addEventListener('click', (e) => {\n        e.preventDefault();\n        let deletionelement = e.currentTarget;\n        let removalid = deletionelement.dataset.id;\n        // Make ajax request to delete this removal configuration.\n        deleteRemovalEntry(courseid, parseInt(removalid)).then(() => {\n            // If the request was okay then remove the table row.\n            let row = deletionelement.closest('tr');\n            row.remove();\n            Toast.add(getString('configdeleted', 'block_stash'), {\n                type: 'info',\n                autohide: true,\n                closeButton: true,\n            });\n        });\n    });\n};\n\nconst registerEditEvent = (courseid, editobject) => {\n    editobject.addEventListener('click', (e) => {\n        e.preventDefault();\n        let jsondata = JSON.parse(editobject.dataset.json);\n        let details = {'removalid': editobject.dataset.id, 'quizid': editobject.dataset.quiz, 'items': jsondata};\n        showModal(courseid, details);\n    });\n};\n\nexport const init = (courseid) => {\n\n    let configbutton = document.querySelector('.block-config-removal');\n    configbutton.addEventListener('click', (e) => {\n        e.preventDefault();\n        showModal(courseid);\n    });\n\n    let deletebutton = document.querySelectorAll('.block-stash-removal-icon');\n    deletebutton.forEach((deleteobject) => {\n        registerDeleteEvent(courseid, deleteobject);\n    });\n\n    let editbutton = document.querySelectorAll('.block-stash-removal-edit');\n    editbutton.forEach((editobject) => {\n        registerEditEvent(courseid, editobject);\n    });\n};\n\nconst fetchQuizData = (courseid) => Ajax.call([{\n    methodname: 'block_stash_get_removal_activities',\n    args: {courseid: courseid}\n}])[0];\n\nconst saveRemovalEntry = (courseid, cmid, items) => Ajax.call([{\n    methodname: 'block_stash_save_removal',\n    args: {'courseid': courseid, 'cmid': cmid, 'items': items}\n}])[0];\n\nconst updateRemovalEntry = (courseid, cmid, items, removalid) => Ajax.call([{\n    methodname: 'block_stash_save_removal',\n    args: {'courseid': courseid, 'cmid': cmid, 'items': items, 'removalid': removalid}\n}])[0];\n\nconst deleteRemovalEntry = (courseid, removalid) => Ajax.call([{\n    methodname: 'block_stash_delete_removal',\n    args: {'courseid': courseid, 'removalid': removalid}\n}])[0];\n"],"names":["showModal","async","courseid","editdetails","modal","buildModal","displayModal","quizzes","fetchQuizData","activities","forEach","quiz","length","id","quizid","context","allitems","getItems","getIndexedItems","additemsdata","items","item","push","itemid","name","quantity","imageurl","removalid","window","console","log","ModalFactory","create","title","body","Templates","render","type","types","SAVE_CANCEL","getRoot","on","ModalEvents","bodyRendered","tradeAdder","init","registerActions","save","saveData","hidden","destroy","show","itemsinfo","document","querySelectorAll","returnitemdata","closest","getAttribute","basedata","parseInt","value","fulldata","children","innerText","trim","quizselect","querySelector","cmid","Toast","addToastRegion","add","autohide","closeButton","removalelement","getElementById","updateRemovalEntry","dataset","then","saveRemovalEntry","selectedIndex","text","JSON","stringify","html","js","tmpe","things","replaceNode","registerDeleteEvent","registerEditEvent","tableobject","appendNodeContents","deleteobject","addEventListener","e","preventDefault","deletionelement","currentTarget","deleteRemovalEntry","remove","editobject","jsondata","parse","json","details","Ajax","call","methodname","args"],"mappings":"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"}