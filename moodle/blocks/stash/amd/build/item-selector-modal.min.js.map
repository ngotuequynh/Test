{"version":3,"file":"item-selector-modal.min.js","sources":["../src/item-selector-modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Select items to give to students.\n *\n * @copyright  2023 Adrian Greeve <adriangreeve.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {add as addToast} from 'core/toast';\n\nconst showModal = async(e) => {\n    let targetnode = e.currentTarget,\n        userid = targetnode.dataset.userid,\n        courseid = targetnode.dataset.courseid;\n\n    const modal = await buildModal(courseid);\n    displayModal(modal, userid, courseid);\n};\n\nconst buildModal = async(courseid) => {\n    let context = await getItems(courseid);\n    context.type = '';\n\n    return ModalFactory.create({\n        title: getString('additem', 'block_stash'),\n        body: Templates.render('block_stash/trade_item_picker', context),\n        type: ModalFactory.types.SAVE_CANCEL\n    });\n};\n\nconst displayModal = async(modal, userid, courseid) => {\n    let savetext = getString('additem', 'block_stash');\n    modal.setSaveButtonText(savetext);\n    modal.getRoot().on(ModalEvents.save, () => {\n\n        // Get the item id and the quantity.\n        let itemnode = document.getElementById('block-stash-item-select');\n        let itemid = itemnode.options[itemnode.selectedIndex].value;\n        let quantitynode = document.getElementById('amount');\n        let quantity = quantitynode.value;\n\n        const itemdetails = saveItem(courseid, itemid, userid, quantity);\n        itemdetails.then((iteminfo) => {\n            // Get the table.\n            let tablenode = document.querySelector('.block-stash-report-table');\n            let tablething = tablenode.children[0];\n            // See if the item exists in the table and update the quantity.\n\n            let existingrow = document.querySelector('.block-stash-item[data-id=\"' + itemid + '\"]');\n            if (existingrow) {\n                // Update the picture number.\n                existingrow.querySelector('div.item-quantity').innerHTML = quantity;\n                // Update the text element.\n                existingrow.parentNode.parentNode.querySelector('input[name=\"quantity\"]').value = quantity;\n            } else {\n                // Add a new row to the table.\n                let rowcontext = {\n                    item: {\n                        id: iteminfo.id,\n                        name: iteminfo.name,\n                        imageurl: iteminfo.imageurl\n                    },\n                    useritem: {\n                        userid: userid,\n                        quantity: quantity\n                    },\n                    courseid: courseid\n                };\n                Templates.render('block_stash/local/report_table/item_row', rowcontext).done((html, js) => {\n                    Templates.appendNodeContents(tablething, html, js);\n                    registerSaveListeners();\n                    registerDeleteListeners();\n                });\n            }\n\n        });\n        modal.destroy();\n    });\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        modal.destroy();\n    });\n\n    modal.show();\n};\n\nconst getItems = (courseid) => Ajax.call([{\n    methodname: 'block_stash_get_items',\n    args: {courseid: courseid}\n}])[0];\n\nconst saveItem = (courseid, itemid, userid, quantity) => Ajax.call([{\n    methodname: 'block_stash_add_user_item',\n    args: {\n        courseid: courseid,\n        itemid: itemid,\n        userid: userid,\n        quantity: quantity\n    }\n}, {\n    methodname: 'block_stash_get_item',\n    args: {\n        itemid: itemid,\n    }\n}])[1];\n\nconst registerSaveListeners = () => {\n    let savebuttons = document.getElementsByClassName('block-stash-save-button');\n    savebuttons.forEach((button) => {\n        button.addEventListener('click', saveItemInformation);\n    });\n};\n\nconst saveItemInformation = (e) => {\n    let target = e.currentTarget;\n    let quantity = target.parentNode.parentNode.querySelector('input[name=\"quantity\"]').value;\n    let itemid = target.parentNode.parentNode.querySelector('input[name=\"itemid\"]').value;\n    let userid = target.parentNode.parentNode.querySelector('input[name=\"userid\"]').value;\n    let courseid = target.parentNode.parentNode.querySelector('input[name=\"courseid\"]').value;\n    saveItem(courseid, itemid, userid, quantity);\n    // maybe put this in the .then At the moment this notifies regardless of whether the save was successful or not.\n    addToast(getString('itemamountupdate', 'block_stash'), {\n        type: 'info',\n        autohide: true,\n        closeButton: true,\n    });\n    let quantityindicator = document.querySelector('.block-stash-item[data-id=\"' + itemid + '\"] div.item-quantity');\n    quantityindicator.innerHTML = quantity;\n};\n\nconst registerDeleteListeners = () => {\n    let deletebuttons = document.getElementsByClassName('block-stash-delete-button');\n    deletebuttons.forEach((button) => {\n        button.addEventListener('click', deleteItem);\n    });\n};\n\nconst deleteItem = (e) => {\n    let target = e.currentTarget;\n    let quantity = 0;\n    let itemid = target.parentNode.parentNode.querySelector('input[name=\"itemid\"]').value;\n    let userid = target.parentNode.parentNode.querySelector('input[name=\"userid\"]').value;\n    let courseid = target.parentNode.parentNode.querySelector('input[name=\"courseid\"]').value;\n    saveItem(courseid, itemid, userid, quantity);\n    // maybe put this in the .then At the moment this notifies regardless of whether the save was successful or not.\n    addToast(getString('itemdeleted', 'block_stash'), {\n        type: 'info',\n        autohide: true,\n        closeButton: true,\n    });\n    let itemimagenode = document.querySelector('.block-stash-item[data-id=\"' + itemid + '\"]');\n    itemimagenode.parentNode.parentNode.remove();\n};\n\nexport const init = () => {\n    let additembutton = document.querySelector(\"[data-additem]\");\n    additembutton.addEventListener('click', showModal);\n    registerSaveListeners();\n    registerDeleteListeners();\n};\n"],"names":["showModal","async","targetnode","e","currentTarget","userid","dataset","courseid","modal","buildModal","displayModal","context","getItems","type","ModalFactory","create","title","body","Templates","render","types","SAVE_CANCEL","savetext","setSaveButtonText","getRoot","on","ModalEvents","save","itemnode","document","getElementById","itemid","options","selectedIndex","value","quantity","saveItem","then","iteminfo","tablething","querySelector","children","existingrow","innerHTML","parentNode","rowcontext","item","id","name","imageurl","useritem","done","html","js","appendNodeContents","registerSaveListeners","registerDeleteListeners","destroy","hidden","show","Ajax","call","methodname","args","getElementsByClassName","forEach","button","addEventListener","saveItemInformation","target","autohide","closeButton","deleteItem","remove"],"mappings":"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"}