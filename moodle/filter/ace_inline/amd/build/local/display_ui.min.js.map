{"version":3,"file":"display_ui.min.js","sources":["../../src/local/display_ui.js"],"sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript for putting the UI up.\n *\n * @module     filter_ace_inline/local/display_ui\n * @copyright  Richard Lobb, Michelle Hsieh 2022\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {createComponent} from \"filter_ace_inline/local/utils\";\nimport {handleButtonClick, executeCode} from \"filter_ace_inline/local/ace_interactive\";\n\n/**\n * Add a UI div containing a Try it! button and a paragraph to display the\n * results of a button click (hidden until button clicked).\n * If uiParameters['html-output'] is non-null,\n * the output paragraph is used only for error output, and the output of the run\n * is inserted directly into the DOM after the (usually hidden) paragraph.\n * @param {html_element} insertionPoint The HTML element after which the div should be inserted.\n * @param {function} getCode A function that retrieves the code to be run.\n * @param {Object} uiParameters The various parameters (mostly attributes of the pre element).\n * Keys are button-name, lang, stdin, files, params, prefix, suffix, html-output.\n */\nexport const addUi = async(insertionPoint, getCode, uiParameters) => {\n    // Create the button-node for execution.\n    const button = createComponent('button', ['btn', 'btn-secondary', 'btn-ace-inline-execution'], {'type':\n            'button'});\n    button.innerHTML = uiParameters.paramsMap['button-name'];\n    // Create the div-node to contain pre-node.\n    const buttonAndOutputDiv = createComponent(\"div\", ['filter-ace-inline-ui-area'], {});\n    const buttonDiv = document.createElement(\"div\");\n    const outputDisplayArea = createComponent('div', ['filter-ace-inline-output-display'], {});\n    // Create a pre-node to contain text.\n    const outputTextArea = createComponent('pre', ['filter-ace-inline-output-text'], {});\n    buttonDiv.append(button);\n    buttonAndOutputDiv.append(buttonDiv);\n    outputDisplayArea.append(outputTextArea);\n    buttonAndOutputDiv.append(outputDisplayArea);\n    outputDisplayArea.style.display = 'none';\n    insertionPoint.after(buttonAndOutputDiv);\n    button.addEventListener('click', async function() {\n        const code = await handleButtonClick(outputDisplayArea, getCode(), uiParameters);\n        // UI parameters get checked first; and if no error, then returns code.\n        if (code !== null) { // If there was an error.\n            executeCode(outputDisplayArea, code, uiParameters);\n        }\n    });\n};"],"names":["async","insertionPoint","getCode","uiParameters","button","innerHTML","paramsMap","buttonAndOutputDiv","buttonDiv","document","createElement","outputDisplayArea","outputTextArea","append","style","display","after","addEventListener","code"],"mappings":"2QAuCqBA,MAAMC,eAAgBC,QAASC,sBAE1CC,QAAS,0BAAgB,SAAU,CAAC,MAAO,gBAAiB,4BAA6B,MACvF,WACRA,OAAOC,UAAYF,aAAaG,UAAU,qBAEpCC,oBAAqB,0BAAgB,MAAO,CAAC,6BAA8B,IAC3EC,UAAYC,SAASC,cAAc,OACnCC,mBAAoB,0BAAgB,MAAO,CAAC,oCAAqC,IAEjFC,gBAAiB,0BAAgB,MAAO,CAAC,iCAAkC,IACjFJ,UAAUK,OAAOT,QACjBG,mBAAmBM,OAAOL,WAC1BG,kBAAkBE,OAAOD,gBACzBL,mBAAmBM,OAAOF,mBAC1BA,kBAAkBG,MAAMC,QAAU,OAClCd,eAAee,MAAMT,oBACrBH,OAAOa,iBAAiB,SAASjB,uBACvBkB,WAAa,sCAAkBP,kBAAmBT,UAAWC,cAEtD,OAATe,uCACYP,kBAAmBO,KAAMf"}