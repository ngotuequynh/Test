{"version":3,"file":"file_helpers.min.js","sources":["../../src/local/file_helpers.js"],"sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript for helping parse files and pseudofiles.\n *\n * @module     filter_ace_inline/local/file_helpers\n * @copyright  Richard Lobb, Michelle Hsieh 2022\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {createComponent, getLangString} from \"filter_ace_inline/local/utils\";\n\nlet uploadFiles = {};\nconst MAX_FILE_SIZE_BYTES = 2097152;\n\n/**\n * Gets the uiParameter 'file-taids' and parses it if it is JSON. Promises an\n * arbitrary non-JSON object for error handling in the run_in_sandbox.php, else\n * promises a JSON object of appropriate mappings\n *\n * @param {object} uiParameters The various parameters (mostly attributes of the pre element)\n * @returns {string} An JSON-encoding of an object that defines one or more\n * filename:filecontents mappings.\n */\nexport const getFiles = async(uiParameters) => {\n    const uploadId = uiParameters.paramsMap['file-upload-id'];\n    let taids = uiParameters.paramsMap['file-taids'];\n    let sandboxArgs = [];\n    let map = {};\n\n    if (Object.keys(taids).length !== 0) {\n        // Catches JSON parse errors for file names.\n        try {\n            taids = JSON.parse(taids);\n        } catch (SyntaxError) {\n            return Promise.resolve('error');\n        }\n        for (const filename in taids) {\n            if (taids.hasOwnProperty(filename)) {\n                const id = taids[filename];\n                const file = document.querySelector('#' + id);\n                if (file === null) {\n                    return Promise.resolve('bad_id');\n                } else {\n                    map[filename] = file.value;\n                }\n            }\n        }\n    }\n\n    // Merge in any explicitly uploaded files with same id in map.\n    for (const name in uploadFiles) {\n        if (uploadFiles.hasOwnProperty(name) && uploadFiles[name].hasOwnProperty(uploadId)) {\n            map[name] = uploadFiles[name][uploadId]; // Copy contents across.\n            sandboxArgs.push(name);\n        }\n    }\n\n    // Add all the sandbox file names into uiSandboxparams for Args access.\n    uiParameters.setSandboxParams(sandboxArgs);\n    return Promise.resolve(JSON.stringify(map));\n};\n\n/**\n * Set up an onchange handler for file uploads. When the user selects\n * a file, a FileReader is created to read the contents. While the read\n * is in progress, a data-busy attribute is set. When the read is complete\n * a data-file-contents object is defined to map name to contents.\n * @param {HTMLelement} uploadElementId The input element of type file.\n */\nexport const setupFileHandler = async(uploadElementId) => {\n    // Creates a div element to contain error messages and divs for error messages.\n    const errorNode = document.createElement(\"div\", [], {'hidden': '1'});\n    const errorHtml = createComponent(\"div\", ['filter-ace-inline-files'], {'hidden': '1'});\n    const fatalHtml = createComponent(\"div\", ['filter-ace-inline-file-error'], {'hidden': '1'});\n    errorNode.appendChild(fatalHtml);\n    errorNode.appendChild(errorHtml);\n\n    const element = document.querySelector('#' + uploadElementId);\n    element.parentNode.insertBefore(errorNode, element.nextSibling);\n    element.setAttribute('multiple', '1'); // Workaround for the fact Moodle strips this.\n    element.addEventListener('change', async() => {\n        // Cleans the contents of the errors between uploads.\n        errorHtml.innerHTML = '';\n        fatalHtml.innerHTML = '';\n        uploadFiles = {};\n        const files = element.files;\n        for (const file of files) {\n            let fileValues = {};\n            const parsedName = parseFileName(file.name);\n            // Parses and modifies name to make sure name is accepted by Jobe.\n            // Also checks file size and refuses to upload at maximum file size (2MB).\n            await readOneFile(file)\n                .then(result => {\n                    // A map for ids.\n                    if (parsedName !== file.name) {\n                        errorHtml.innerHTML = '<li><em>' + file.name + '</em><strong>&nbsp;&rArr;&nbsp;'\n                            + parsedName + '</strong></li>' + errorHtml.innerHTML;\n                        }\n                    fileValues[uploadElementId] = result;\n                    return null;\n                })\n                .catch(() => {\n                    fatalHtml.innerHTML = '<li><strong><em>' + file.name + '</em>&nbsp;'\n                        + '</strong></li>' + fatalHtml.innerHTML;\n                });\n            if (fileValues.size !== 0) {\n                // Maps the name with the filevalue map of id to value.\n                uploadFiles[parsedName] = fileValues;\n            }\n        }\n        displayAllFileErrors(errorNode, errorHtml, fatalHtml);\n    });\n};\n\n/**\n * Read a single file and return an appropriate promise of contents or rejects.\n * Checks file size prior to reading to prevent wasting time processing file.\n * @param {file} file A file from an 'input type=file' element filelist.\n * @returns {Promise} A promise wrapping the given file's contents.\n */\nconst readOneFile = async(file) => {\n    if (file.size > MAX_FILE_SIZE_BYTES) {\n        return Promise.reject(\"excessive size\");\n    }\n    return new Promise((resolve, reject) => {\n        let rdr = new FileReader();\n        rdr.onload = () => {\n          resolve(rdr.result);\n        };\n        rdr.onerror = reject;\n        rdr.readAsText(file);\n    });\n};\n\n/**\n * Displays all file errors for each error.\n * @param {type} error The error langString to be used.\n * @param {type} errorHtml The errorNode for the error message to be displayed.\n */\nconst displayFileError = async(error, errorHtml) => {\n    errorHtml.innerHTML = '<strong>' + await getLangString(error)\n        + '</strong><ul>' + errorHtml.innerHTML + '</ul>';\n    errorHtml.removeAttribute('hidden');\n};\n\n/**\n * Adds the errors to the error and displays it all.\n *\n * @param {Element} errorNode The element to be displayed.\n * @param {Element} errorHtml The HTML to be displayed for errors.\n * @param {Element} fatalHtml The HTML to be displayed for errors that do not upload\n * files.\n */\nconst displayAllFileErrors = (errorNode, errorHtml, fatalHtml) => {\n    // Hides all errors at first.\n    errorHtml.setAttribute('hidden', '1');\n    fatalHtml.setAttribute('hidden', '1');\n    if (errorHtml.innerHTML !== '' || fatalHtml.innerHTML !== '') {\n        if (errorHtml.innerHTML !== '') {\n            displayFileError('file_changed_name', errorHtml);\n        }\n        if (fatalHtml.innerHTML !== '') {\n            displayFileError('file_not_uploaded', fatalHtml);\n        }\n        errorNode.removeAttribute('hidden');\n    } else {\n        errorNode.setAttribute('hidden', '1');\n    }\n};\n\n\n/**\n * Parses text according to what Jobe accepts. Modify this if using other\n * sandboxes with different acceptance parameters.\n *\n * @param {String} filename The name of the file to be parsed.\n * @returns {String} The string of the parsed filename.\n */\nconst parseFileName = (filename) => {\n    // Matches all the spaces and replaces it with _.\n    const stripped = filename.replace(/\\s/g, '_');\n    // Matches anything which isn't alphanumeric, _, - or . and removes it.\n    return stripped.replace(/[^A-Za-z0-9._-]/g, '');\n};"],"names":["uploadFiles","async","uploadId","uiParameters","paramsMap","taids","sandboxArgs","map","Object","keys","length","JSON","parse","SyntaxError","Promise","resolve","filename","hasOwnProperty","id","file","document","querySelector","value","name","push","setSandboxParams","stringify","errorNode","createElement","errorHtml","fatalHtml","appendChild","element","uploadElementId","parentNode","insertBefore","nextSibling","setAttribute","addEventListener","innerHTML","files","fileValues","parsedName","parseFileName","readOneFile","then","result","catch","size","displayAllFileErrors","reject","rdr","FileReader","onload","onerror","readAsText","displayFileError","error","removeAttribute","replace"],"mappings":";;;;;;;;IA2BIA,YAAc,qBAYMC,MAAAA,qBACdC,SAAWC,aAAaC,UAAU,sBACpCC,MAAQF,aAAaC,UAAU,cAC/BE,YAAc,GACdC,IAAM,MAEwB,IAA9BC,OAAOC,KAAKJ,OAAOK,OAAc,KAG7BL,MAAQM,KAAKC,MAAMP,OACrB,MAAOQ,oBACEC,QAAQC,QAAQ,aAEtB,MAAMC,YAAYX,SACfA,MAAMY,eAAeD,UAAW,OAC1BE,GAAKb,MAAMW,UACXG,KAAOC,SAASC,cAAc,IAAMH,OAC7B,OAATC,YACOL,QAAQC,QAAQ,UAEvBR,IAAIS,UAAYG,KAAKG,WAOhC,MAAMC,QAAQvB,YACXA,YAAYiB,eAAeM,OAASvB,YAAYuB,MAAMN,eAAef,YACrEK,IAAIgB,MAAQvB,YAAYuB,MAAMrB,UAC9BI,YAAYkB,KAAKD,cAKzBpB,aAAasB,iBAAiBnB,aACvBQ,QAAQC,QAAQJ,KAAKe,UAAUnB,iCAUVN,MAAAA,wBAEtB0B,UAAYP,SAASQ,cAAc,MAAO,GAAI,QAAW,MACzDC,WAAY,0BAAgB,MAAO,CAAC,2BAA4B,QAAW,MAC3EC,WAAY,0BAAgB,MAAO,CAAC,gCAAiC,QAAW,MACtFH,UAAUI,YAAYD,WACtBH,UAAUI,YAAYF,iBAEhBG,QAAUZ,SAASC,cAAc,IAAMY,iBAC7CD,QAAQE,WAAWC,aAAaR,UAAWK,QAAQI,aACnDJ,QAAQK,aAAa,WAAY,KACjCL,QAAQM,iBAAiB,UAAUrC,UAE/B4B,UAAUU,UAAY,GACtBT,UAAUS,UAAY,GACtBvC,YAAc,SACRwC,MAAQR,QAAQQ,UACjB,MAAMrB,QAAQqB,MAAO,KAClBC,WAAa,SACXC,WAAaC,cAAcxB,KAAKI,YAGhCqB,YAAYzB,MACb0B,MAAKC,SAEEJ,aAAevB,KAAKI,OACpBM,UAAUU,UAAY,WAAapB,KAAKI,KAAO,kCACzCmB,WAAa,iBAAmBb,UAAUU,WAEpDE,WAAWR,iBAAmBa,OACvB,QAEVC,OAAM,KACHjB,UAAUS,UAAY,mBAAqBpB,KAAKI,KAA1B,4BACGO,UAAUS,aAEnB,IAApBE,WAAWO,OAEXhD,YAAY0C,YAAcD,YAGlCQ,qBAAqBtB,UAAWE,UAAWC,qBAU7Cc,YAAc3C,MAAAA,MACZkB,KAAK6B,KA7Ge,QA8GblC,QAAQoC,OAAO,kBAEnB,IAAIpC,SAAQ,CAACC,QAASmC,cACrBC,IAAM,IAAIC,WACdD,IAAIE,OAAS,KACXtC,QAAQoC,IAAIL,SAEdK,IAAIG,QAAUJ,OACdC,IAAII,WAAWpC,SASjBqC,iBAAmBvD,MAAMwD,MAAO5B,aAClCA,UAAUU,UAAY,iBAAmB,wBAAckB,OACjD,gBAAkB5B,UAAUU,UAAY,QAC9CV,UAAU6B,gBAAgB,WAWxBT,qBAAuB,CAACtB,UAAWE,UAAWC,aAEhDD,UAAUQ,aAAa,SAAU,KACjCP,UAAUO,aAAa,SAAU,KACL,KAAxBR,UAAUU,WAA4C,KAAxBT,UAAUS,WACZ,KAAxBV,UAAUU,WACViB,iBAAiB,oBAAqB3B,WAEd,KAAxBC,UAAUS,WACViB,iBAAiB,oBAAqB1B,WAE1CH,UAAU+B,gBAAgB,WAE1B/B,UAAUU,aAAa,SAAU,MAYnCM,cAAiB3B,UAEFA,SAAS2C,QAAQ,MAAO,KAEzBA,QAAQ,mBAAoB"}